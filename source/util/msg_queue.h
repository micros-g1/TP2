/*
* ms_evqueue.h
        *
        *  Created on: 30 Aug 2019
*      Author: grein
*/

//Idea based on
//https://github.com/ITBAALUMNOS/Tetris/blob/master/Sources/event_queue.h

//queue for collecting events generated by several sources

#ifndef _MSG_QUEUE_H_
#define _MSG_QUEUE_H_

#include <stdbool.h>
#include <stdint.h>



//Total number of elements that event queue can hold
#define Q_MAX_LENGTH	256
#define Q_MSG_LEN 7 // without terminator

typedef struct {
    uint8_t buffer[Q_MAX_LENGTH][Q_MSG_LEN+1]; //leave one byte for terminator
    volatile uint32_t len;				//Keeps track of queue length
    volatile uint32_t in;					//Offset for adding next data
    volatile uint32_t out;				//Offset for reading next data
} msg_queue_t;



void mq_init(msg_queue_t * q);

//Wait for data. Can only be used by main loop.
void mq_read_blocking(msg_queue_t * q, uint8_t * data);
//Flush queue. Can only be used by main loop.
void mq_flush(msg_queue_t * q);
//Add data to queue. True if event queue was not full
bool mq_pushback(msg_queue_t * q, uint8_t * data);
bool mq_pushfront(msg_queue_t * q, uint8_t * data);

//Get current queue length.
void mq_popfront(msg_queue_t * q, uint8_t * data); // will return 0 if queue empty, but also if data is 0. check length first!
unsigned int mq_length(msg_queue_t * q);
bool mq_isfull(msg_queue_t * q);

#endif /* _MSG_QUEUE_H_ */
